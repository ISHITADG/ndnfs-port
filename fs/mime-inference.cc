/*
 * Copyright (c) 2014 University of California, Los Angeles
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Zhehao Wang <wangzhehao410305@gmail.com>
 */
 
#include "mime-inference.h"

using namespace std;

std::map<const char *, const char *, str_cmp> ext_mime_map;

int mime_infer(char *mime_type, const char *path)
{
  std::string path_string(path);
  
  size_t last_dot = path_string.find_last_of(".");
  
  if (last_dot == std::string::npos) {
    strcpy(mime_type, "");
    return 0;
  }
  
  std::string ext_string = path_string.substr(last_dot);
  std::map<const char *, const char *>::iterator it = ext_mime_map.find(ext_string.c_str());
  
  if (it != ext_mime_map.end()) {
    FILE_LOG(LOG_ERROR) << "mime_infer: found matching mime type for extension: " << ext_string << "; mime_type: " << it->second << std::endl;
    strcpy(mime_type, it->second);
    return 1;
  }
  else {
    strcpy(mime_type, "");
    return 0;
  }
}

int initialize_ext_mime_map()
{
  // insert into global in-memory map based on http://www.sitepoint.com/web-foundations/mime-types-complete-list/
  ext_mime_map.insert(std::pair<const char *, const char *>(".3dm", "x-world/x-3dmf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".3dmf", "x-world/x-3dmf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".a", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aab", "application/x-authorware-bin"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aam", "application/x-authorware-map"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aas", "application/x-authorware-seg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".abc", "text/vnd.abc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".acgi", "text/html"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".afl", "video/animaflex"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ai", "application/postscript"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aif", "audio/aiff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aif", "audio/x-aiff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aifc", "audio/aiff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aifc", "audio/x-aiff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aiff", "audio/aiff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aiff", "audio/x-aiff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aim", "application/x-aim"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aip", "text/x-audiosoft-intra"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ani", "application/x-navi-animation"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aos", "application/x-nokia-9000-communicator-add-on-software"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".aps", "application/mime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".arc", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".arj", "application/arj"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".arj", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".art", "image/x-jg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".asf", "video/x-ms-asf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".asm", "text/x-asm"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".asp", "text/asp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".asx", "application/x-mplayer2"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".asx", "video/x-ms-asf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".asx", "video/x-ms-asf-plugin"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".au", "audio/basic"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".au", "audio/x-au"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".avi", "application/x-troff-msvideo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".avi", "video/avi"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".avi", "video/msvideo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".avi", "video/x-msvideo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".avs", "video/avs-video"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bcpio", "application/x-bcpio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bin", "application/mac-binary"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bin", "application/macbinary"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bin", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bin", "application/x-binary"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bin", "application/x-macbinary"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bm", "image/bmp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bmp", "image/bmp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bmp", "image/x-windows-bmp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".boo", "application/book"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".book", "application/book"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".boz", "application/x-bzip2"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bsh", "application/x-bsh"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bz", "application/x-bzip"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".bz2", "application/x-bzip2"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".c", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".c", "text/x-c"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".c++", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cat", "application/vnd.ms-pki.seccat"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cc", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cc", "text/x-c"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ccad", "application/clariscad"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cco", "application/x-cocoa"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cdf", "application/cdf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cdf", "application/x-cdf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cdf", "application/x-netcdf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cer", "application/pkix-cert"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cer", "application/x-x509-ca-cert"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cha", "application/x-chat"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".chat", "application/x-chat"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".class", "application/java"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".class", "application/java-byte-code"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".class", "application/x-java-class"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".com", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".com", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".conf", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cpio", "application/x-cpio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cpp", "text/x-c"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cpt", "application/mac-compactpro"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cpt", "application/x-compactpro"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cpt", "application/x-cpt"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".crl", "application/pkcs-crl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".crl", "application/pkix-crl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".crt", "application/pkix-cert"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".crt", "application/x-x509-ca-cert"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".crt", "application/x-x509-user-cert"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".csh", "application/x-csh"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".csh", "text/x-script.csh"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".css", "application/x-pointplus"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".css", "text/css"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".cxx", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dcr", "application/x-director"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".deepv", "application/x-deepv"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".def", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".der", "application/x-x509-ca-cert"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dif", "video/x-dv"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dir", "application/x-director"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dl", "video/dl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dl", "video/x-dl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".doc", "application/msword"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dot", "application/msword"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dp", "application/commonground"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".drw", "application/drafting"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dump", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dv", "video/x-dv"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dvi", "application/x-dvi"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dwf", "drawing/x-dwf (old)"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dwf", "model/vnd.dwf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dwg", "application/acad"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dwg", "image/vnd.dwg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dwg", "image/x-dwg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dxf", "application/dxf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dxf", "image/vnd.dwg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dxf", "image/x-dwg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".dxr", "application/x-director"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".el", "text/x-script.elisp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".elc", "application/x-bytecode.elisp (compiled elisp)"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".elc", "application/x-elc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".env", "application/x-envoy"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".eps", "application/postscript"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".es", "application/x-esrehber"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".etx", "text/x-setext"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".evy", "application/envoy"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".evy", "application/x-envoy"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".exe", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".f", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".f", "text/x-fortran"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".f77", "text/x-fortran"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".f90", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".f90", "text/x-fortran"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".fdf", "application/vnd.fdf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".fif", "application/fractals"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".fif", "image/fif"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".fli", "video/fli"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".fli", "video/x-fli"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".flo", "image/florian"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".flx", "text/vnd.fmi.flexstor"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".fmf", "video/x-atomic3d-feature"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".for", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".for", "text/x-fortran"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".fpx", "image/vnd.fpx"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".fpx", "image/vnd.net-fpx"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".frl", "application/freeloader"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".funk", "audio/make"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".g", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".g3", "image/g3fax"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gif", "image/gif"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gl", "video/gl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gl", "video/x-gl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gsd", "audio/x-gsm"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gsm", "audio/x-gsm"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gsp", "application/x-gsp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gss", "application/x-gss"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gtar", "application/x-gtar"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gz", "application/x-compressed"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gz", "application/x-gzip"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gzip", "application/x-gzip"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".gzip", "multipart/x-gzip"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".h", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".h", "text/x-h"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hdf", "application/x-hdf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".help", "application/x-helpfile"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hgl", "application/vnd.hp-hpgl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hh", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hh", "text/x-h"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hlb", "text/x-script"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hlp", "application/hlp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hlp", "application/x-helpfile"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hlp", "application/x-winhelp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hpg", "application/vnd.hp-hpgl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hpgl", "application/vnd.hp-hpgl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hqx", "application/binhex"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hqx", "application/binhex4"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hqx", "application/mac-binhex"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hqx", "application/mac-binhex40"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hqx", "application/x-binhex40"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hqx", "application/x-mac-binhex40"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".hta", "application/hta"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".htc", "text/x-component"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".htm", "text/html"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".html", "text/html"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".htmls", "text/html"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".htt", "text/webviewhtml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".htx", "text/html"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ice", "x-conference/x-cooltalk"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ico", "image/x-icon"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".idc", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ief", "image/ief"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".iefs", "image/ief"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".iges", "application/iges"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".iges", "model/iges"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".igs", "application/iges"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".igs", "model/iges"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ima", "application/x-ima"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".imap", "application/x-httpd-imap"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".inf", "application/inf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ins", "application/x-internett-signup"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ip", "application/x-ip2"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".isu", "video/x-isvideo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".it", "audio/it"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".iv", "application/x-inventor"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ivr", "i-world/i-vrml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ivy", "application/x-livescreen"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jam", "audio/x-jam"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jav", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jav", "text/x-java-source"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".java", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".java", "text/x-java-source"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jcm", "application/x-java-commerce"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jfif", "image/jpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jfif", "image/pjpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jfif-tbnl", "image/jpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jpe", "image/jpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jpe", "image/pjpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jpeg", "image/jpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jpeg", "image/pjpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jpg", "image/jpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jpg", "image/pjpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jps", "image/x-jps"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".js", "application/x-javascript"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".js", "application/javascript"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".js", "application/ecmascript"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".js", "text/javascript"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".js", "text/ecmascript"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".jut", "image/jutvision"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".kar", "audio/midi"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".kar", "music/x-karaoke"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ksh", "application/x-ksh"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ksh", "text/x-script.ksh"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".la", "audio/nspaudio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".la", "audio/x-nspaudio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lam", "audio/x-liveaudio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".latex", "application/x-latex"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lha", "application/lha"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lha", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lha", "application/x-lha"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lhx", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".list", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lma", "audio/nspaudio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lma", "audio/x-nspaudio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".log", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lsp", "application/x-lisp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lsp", "text/x-script.lisp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lst", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lsx", "text/x-la-asf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ltx", "application/x-latex"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lzh", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lzh", "application/x-lzh"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lzx", "application/lzx"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lzx", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".lzx", "application/x-lzx"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".m", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".m", "text/x-m"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".m1v", "video/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".m2a", "audio/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".m2v", "video/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".m3u", "audio/x-mpequrl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".man", "application/x-troff-man"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".map", "application/x-navimap"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mar", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mbd", "application/mbedlet"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mc$", "application/x-magic-cap-package-1.0"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mcd", "application/mcad"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mcd", "application/x-mathcad"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mcf", "image/vasa"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mcf", "text/mcf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mcp", "application/netmc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".me", "application/x-troff-me"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mht", "message/rfc822"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mhtml", "message/rfc822"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mid", "application/x-midi"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mid", "audio/midi"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mid", "audio/x-mid"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mid", "audio/x-midi"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mid", "music/crescendo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mid", "x-music/x-midi"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".midi", "application/x-midi"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".midi", "audio/midi"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".midi", "audio/x-mid"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".midi", "audio/x-midi"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".midi", "music/crescendo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".midi", "x-music/x-midi"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mif", "application/x-frame"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mif", "application/x-mif"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mime", "message/rfc822"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mime", "www/mime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mjf", "audio/x-vnd.audioexplosion.mjuicemediafile"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mjpg", "video/x-motion-jpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mm", "application/base64"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mm", "application/x-meme"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mme", "application/base64"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mod", "audio/mod"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mod", "audio/x-mod"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".moov", "video/quicktime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mov", "video/quicktime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".movie", "video/x-sgi-movie"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mp2", "audio/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mp2", "audio/x-mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mp2", "video/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mp2", "video/x-mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mp2", "video/x-mpeq2a"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mp3", "audio/mpeg3"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mp3", "audio/x-mpeg-3"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mp3", "video/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mp3", "video/x-mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpa", "audio/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpa", "video/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpc", "application/x-project"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpe", "video/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpeg", "video/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpg", "audio/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpg", "video/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpga", "audio/mpeg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpp", "application/vnd.ms-project"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpt", "application/x-project"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpv", "application/x-project"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mpx", "application/x-project"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mrc", "application/marc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ms", "application/x-troff-ms"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mv", "video/x-sgi-movie"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".my", "audio/make"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".mzz", "application/x-vnd.audioexplosion.mzz"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".nap", "image/naplps"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".naplps", "image/naplps"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".nc", "application/x-netcdf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ncm", "application/vnd.nokia.configuration-message"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".nif", "image/x-niff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".niff", "image/x-niff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".nix", "application/x-mix-transfer"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".nsc", "application/x-conference"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".nvd", "application/x-navidoc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".o", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".oda", "application/oda"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".omc", "application/x-omc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".omcd", "application/x-omcdatamaker"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".omcr", "application/x-omcregerator"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p", "text/x-pascal"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p10", "application/pkcs10"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p10", "application/x-pkcs10"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p12", "application/pkcs-12"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p12", "application/x-pkcs12"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p7a", "application/x-pkcs7-signature"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p7c", "application/pkcs7-mime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p7c", "application/x-pkcs7-mime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p7m", "application/pkcs7-mime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p7m", "application/x-pkcs7-mime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p7r", "application/x-pkcs7-certreqresp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".p7s", "application/pkcs7-signature"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".part", "application/pro_eng"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pas", "text/pascal"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pbm", "image/x-portable-bitmap"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pcl", "application/vnd.hp-pcl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pcl", "application/x-pcl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pct", "image/x-pict"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pcx", "image/x-pcx"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pdb", "chemical/x-pdb"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pdf", "application/pdf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pfunk", "audio/make"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pfunk", "audio/make.my.funk"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pgm", "image/x-portable-graymap"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pgm", "image/x-portable-greymap"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pic", "image/pict"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pict", "image/pict"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pkg", "application/x-newton-compatible-pkg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pko", "application/vnd.ms-pki.pko"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pl", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pl", "text/x-script.perl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".plx", "application/x-pixclscript"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pm", "image/x-xpixmap"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pm", "text/x-script.perl-module"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pm4", "application/x-pagemaker"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pm5", "application/x-pagemaker"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".png", "image/png"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pnm", "application/x-portable-anymap"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pnm", "image/x-portable-anymap"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pot", "application/mspowerpoint"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pot", "application/vnd.ms-powerpoint"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pov", "model/x-pov"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ppa", "application/vnd.ms-powerpoint"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ppm", "image/x-portable-pixmap"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pps", "application/mspowerpoint"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pps", "application/vnd.ms-powerpoint"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ppt", "application/mspowerpoint"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ppt", "application/powerpoint"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ppt", "application/vnd.ms-powerpoint"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ppt", "application/x-mspowerpoint"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ppz", "application/mspowerpoint"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pre", "application/x-freelance"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".prt", "application/pro_eng"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ps", "application/postscript"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".psd", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pvu", "paleovu/x-pv"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pwz", "application/vnd.ms-powerpoint"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".py", "text/x-script.phyton"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".pyc", "application/x-bytecode.python"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".qcp", "audio/vnd.qcelp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".qd3", "x-world/x-3dmf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".qd3d", "x-world/x-3dmf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".qif", "image/x-quicktime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".qt", "video/quicktime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".qtc", "video/x-qtc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".qti", "image/x-quicktime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".qtif", "image/x-quicktime"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ra", "audio/x-pn-realaudio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ra", "audio/x-pn-realaudio-plugin"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ra", "audio/x-realaudio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ram", "audio/x-pn-realaudio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ras", "application/x-cmu-raster"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ras", "image/cmu-raster"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ras", "image/x-cmu-raster"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rast", "image/cmu-raster"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rexx", "text/x-script.rexx"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rf", "image/vnd.rn-realflash"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rgb", "image/x-rgb"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rm", "application/vnd.rn-realmedia"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rm", "audio/x-pn-realaudio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rmi", "audio/mid"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rmm", "audio/x-pn-realaudio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rmp", "audio/x-pn-realaudio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rmp", "audio/x-pn-realaudio-plugin"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rng", "application/ringing-tones"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rng", "application/vnd.nokia.ringing-tone"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rnx", "application/vnd.rn-realplayer"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".roff", "application/x-troff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rp", "image/vnd.rn-realpix"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rpm", "audio/x-pn-realaudio-plugin"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rt", "text/richtext"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rt", "text/vnd.rn-realtext"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rtf", "application/rtf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rtf", "application/x-rtf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rtf", "text/richtext"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rtx", "application/rtf"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rtx", "text/richtext"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".rv", "video/vnd.rn-realvideo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".s", "text/x-asm"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".s3m", "audio/s3m"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".saveme", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sbk", "application/x-tbook"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".scm", "application/x-lotusscreencam"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".scm", "text/x-script.guile"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".scm", "text/x-script.scheme"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".scm", "video/x-scm"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sdml", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sdp", "application/sdp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sdp", "application/x-sdp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sdr", "application/sounder"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sea", "application/sea"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sea", "application/x-sea"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".set", "application/set"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sgm", "text/sgml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sgm", "text/x-sgml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sgml", "text/sgml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sgml", "text/x-sgml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sh", "application/x-bsh"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sh", "application/x-sh"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sh", "application/x-shar"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sh", "text/x-script.sh"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".shar", "application/x-bsh"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".shar", "application/x-shar"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".shtml", "text/html"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".shtml", "text/x-server-parsed-html"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sid", "audio/x-psid"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sit", "application/x-sit"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sit", "application/x-stuffit"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".skd", "application/x-koan"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".skm", "application/x-koan"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".skp", "application/x-koan"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".skt", "application/x-koan"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sl", "application/x-seelogo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".smi", "application/smil"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".smil", "application/smil"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".snd", "audio/basic"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".snd", "audio/x-adpcm"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sol", "application/solids"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".spc", "application/x-pkcs7-certificates"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".spc", "text/x-speech"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".spl", "application/futuresplash"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".spr", "application/x-sprite"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sprite", "application/x-sprite"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".src", "application/x-wais-source"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ssi", "text/x-server-parsed-html"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ssm", "application/streamingmedia"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sst", "application/vnd.ms-pki.certstore"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".step", "application/step"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".stl", "application/sla"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".stl", "application/vnd.ms-pki.stl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".stl", "application/x-navistyle"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".stp", "application/step"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sv4cpio", "application/x-sv4cpio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".sv4crc", "application/x-sv4crc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".svf", "image/vnd.dwg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".svf", "image/x-dwg"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".svr", "application/x-world"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".svr", "x-world/x-svr"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".swf", "application/x-shockwave-flash"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".t", "application/x-troff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".talk", "text/x-speech"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tar", "application/x-tar"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tbk", "application/toolbook"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tbk", "application/x-tbook"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tcl", "application/x-tcl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tcl", "text/x-script.tcl"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tcsh", "text/x-script.tcsh"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tex", "application/x-tex"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".texi", "application/x-texinfo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".texinfo", "application/x-texinfo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".text", "application/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".text", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tgz", "application/gnutar"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tgz", "application/x-compressed"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tif", "image/tiff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tif", "image/x-tiff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tiff", "image/tiff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tiff", "image/x-tiff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tr", "application/x-troff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tsi", "audio/tsp-audio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tsp", "application/dsptype"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tsp", "audio/tsplayer"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".tsv", "text/tab-separated-values"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".turbot", "image/florian"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".txt", "text/plain"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".uil", "text/x-uil"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".uni", "text/uri-list"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".unis", "text/uri-list"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".unv", "application/i-deas"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".uri", "text/uri-list"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".uris", "text/uri-list"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ustar", "application/x-ustar"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".ustar", "multipart/x-ustar"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".uu", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".uu", "text/x-uuencode"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".uue", "text/x-uuencode"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vcd", "application/x-cdlink"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vcs", "text/x-vcalendar"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vda", "application/vda"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vdo", "video/vdo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vew", "application/groupwise"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".viv", "video/vivo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".viv", "video/vnd.vivo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vivo", "video/vivo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vivo", "video/vnd.vivo"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vmd", "application/vocaltec-media-desc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vmf", "application/vocaltec-media-file"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".voc", "audio/voc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".voc", "audio/x-voc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vos", "video/vosaic"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vox", "audio/voxware"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vqe", "audio/x-twinvq-plugin"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vqf", "audio/x-twinvq"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vql", "audio/x-twinvq-plugin"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vrml", "application/x-vrml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vrml", "model/vrml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vrml", "x-world/x-vrml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vrt", "x-world/x-vrt"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vsd", "application/x-visio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vst", "application/x-visio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".vsw", "application/x-visio"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".w60", "application/wordperfect6.0"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".w61", "application/wordperfect6.1"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".w6w", "application/msword"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wav", "audio/wav"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wav", "audio/x-wav"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wb1", "application/x-qpro"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wbmp", "image/vnd.wap.wbmp"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".web", "application/vnd.xara"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wiz", "application/msword"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wk1", "application/x-123"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wmf", "windows/metafile"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wml", "text/vnd.wap.wml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wmlc", "application/vnd.wap.wmlc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wmls", "text/vnd.wap.wmlscript"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wmlsc", "application/vnd.wap.wmlscriptc"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".word", "application/msword"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wp", "application/wordperfect"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wp5", "application/wordperfect"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wp5", "application/wordperfect6.0"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wp6", "application/wordperfect"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wpd", "application/wordperfect"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wpd", "application/x-wpwin"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wq1", "application/x-lotus"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wri", "application/mswrite"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wri", "application/x-wri"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wrl", "application/x-world"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wrl", "model/vrml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wrl", "x-world/x-vrml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wrz", "model/vrml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wrz", "x-world/x-vrml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wsc", "text/scriplet"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wsrc", "application/x-wais-source"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".wtk", "application/x-wintalk"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xbm", "image/x-xbitmap"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xbm", "image/x-xbm"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xbm", "image/xbm"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xdr", "video/x-amt-demorun"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xgz", "xgl/drawing"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xif", "image/vnd.xiff"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xl", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xla", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xla", "application/x-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xla", "application/x-msexcel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlb", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlb", "application/vnd.ms-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlb", "application/x-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlc", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlc", "application/vnd.ms-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlc", "application/x-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xld", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xld", "application/x-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlk", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlk", "application/x-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xll", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xll", "application/vnd.ms-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xll", "application/x-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlm", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlm", "application/vnd.ms-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlm", "application/x-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xls", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xls", "application/vnd.ms-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xls", "application/x-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xls", "application/x-msexcel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlt", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlt", "application/x-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlv", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlv", "application/x-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlw", "application/excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlw", "application/vnd.ms-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlw", "application/x-excel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xlw", "application/x-msexcel"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xm", "audio/xm"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xml", "application/xml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xml", "text/xml"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xmz", "xgl/movie"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xpix", "application/x-vnd.ls-xpix"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xpm", "image/x-xpixmap"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xpm", "image/xpm"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".x-png", "image/png"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xsr", "video/x-amt-showrun"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xwd", "image/x-xwd"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xwd", "image/x-xwindowdump"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".xyz", "chemical/x-pdb"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".z", "application/x-compress"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".z", "application/x-compressed"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".zip", "application/x-compressed"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".zip", "application/x-zip-compressed"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".zip", "application/zip"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".zip", "multipart/x-zip"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".zoo", "application/octet-stream"));
  ext_mime_map.insert(std::pair<const char *, const char *>(".zsh", "text/x-script.zsh"));
  
  return 1;
}